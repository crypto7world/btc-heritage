pub mod account_xpub;
pub mod database;
pub mod errors;
pub mod heritage_config;
pub mod heritage_wallet;
pub mod subwallet_config;
pub mod utils;

pub use crate::bitcoin::{psbt::PartiallySignedTransaction, Amount};
pub use account_xpub::{AccountXPub, AccountXPubId};
pub use heritage_config::{heirtypes::*, HeritageConfig, HeritageConfigVersion};
pub use heritage_wallet::{
    backup::{HeritageWalletBackup, SubwalletDescriptorBackup},
    BlockInclusionObjective, HeritageWallet, HeritageWalletBalance, Recipient, SpendingConfig,
};

pub use bdk::bitcoin;
pub use bdk::miniscript;

#[cfg(feature = "online")]
pub use bdk::{bitcoincore_rpc, electrum_client};

// Publicly exposed BDK types
pub mod bdk_types {
    pub use bdk::{
        database::{BatchDatabase, BatchOperations, Database, SyncTime},
        BlockTime, Error, KeychainKind, LocalUtxo, TransactionDetails,
    };

    #[cfg(feature = "online")]
    pub use bdk::blockchain::{
        electrum::ElectrumBlockchain,
        rpc::{Auth, RpcBlockchainFactory},
        BlockchainFactory,
    };
}

#[cfg(test)]
mod tests {
    use bdk::BlockTime;
    use serde_json::Value;

    use crate::{
        heritage_config::HeritageExplorerTrait, subwallet_config::SubwalletConfig, AccountXPub,
    };

    pub use super::dbtests::*;
    pub use super::psbttests::*;

    const REFERENCE_BLOCK_TIME: BlockTime = BlockTime {
        height: 816_600,
        timestamp: 1_700_000_000,
    };

    pub const PKH_EXTERNAL_RECIPIENT_ADDR: &'static str = "msvxfV2RBUSktRkhPRNbxJ73F9owWAea9a";
    pub const WPKH_EXTERNAL_RECIPIENT_ADDR: &'static str =
        "bcrt1q3q4u6zx7k6c4rwtf9nzhymkvus758eluc06mug";
    pub const TR_EXTERNAL_RECIPIENT_ADDR: &'static str =
        "bcrt1pj74kr57y4t5d4nxf8qz2rytac86k2cawpeh2eq2plnlkmc0yxngs0kyqyn";

    const EXPECTED_VALUES: [[&str; 4]; 3] = [
        [
            "tr([9c7088e3/86'/1'/0']tpubDD2pKf3K2M2oukBVyGLVBKhqMV2MC5jQ3ABYNY17tFUgkq8Y2M65yBmeZHiz9gwrYfYkCZqipP9pL5NGwkSSsS2dijy7Nus1DLJLr6FQyWv/0/*,\
            {and_v(v:pk([f0d79bf6/86'/1'/1751476594']tpubDDFibSiSkFTfnLc4cG5X2wwkLjatiWbxb3T6PNbaCuv9uQpeq4i2sRrk7EKFgd56TTTHXpKDrW4JEDfsueAfLYC9CTPAung761RWMcWE3aP/0/*),and_v(v:older(12960),after(1731536000))),\
            and_v(v:pk([c907dcb9/86'/1'/1751476594'/0/0]029d47adc090487692bc8c31729085be2ade1a80aa72962da9f1bb80d99d0cd7bf),and_v(v:older(25920),after(1734560000)))})\
            #7y7nqca9",
            "tr([9c7088e3/86'/1'/0']tpubDD2pKf3K2M2oukBVyGLVBKhqMV2MC5jQ3ABYNY17tFUgkq8Y2M65yBmeZHiz9gwrYfYkCZqipP9pL5NGwkSSsS2dijy7Nus1DLJLr6FQyWv/1/*,\
            {and_v(v:pk([f0d79bf6/86'/1'/1751476594']tpubDDFibSiSkFTfnLc4cG5X2wwkLjatiWbxb3T6PNbaCuv9uQpeq4i2sRrk7EKFgd56TTTHXpKDrW4JEDfsueAfLYC9CTPAung761RWMcWE3aP/1/*),and_v(v:older(12960),after(1731536000))),\
            and_v(v:pk([c907dcb9/86'/1'/1751476594'/0/0]029d47adc090487692bc8c31729085be2ade1a80aa72962da9f1bb80d99d0cd7bf),and_v(v:older(25920),after(1734560000)))})\
            #j84snf2h",
            "bcrt1p30dak2tfa6m7erhayrmmceykrfmqxy6qf6gqzzdphgv6lw9s9ykq4w70ya",
            "bcrt1pfmle946ue92fvn07y964eucx82a7rx4qum72eapf47vkls8kt04sxyyqs6"
        ],
        [
            "tr([9c7088e3/86'/1'/1']tpubDD2pKf3K2M2oygc9tQX4ze9o9sMmn738oHEiRTwxAWJyW7HyPYjYQKMrxznXmgWncr416q1htkCszdHg3tbGseUUQXoxFZmjdAbwU8HY9QX/0/*,\
            {and_v(v:pk([f0d79bf6/86'/1'/1751476594']tpubDDFibSiSkFTfnLc4cG5X2wwkLjatiWbxb3T6PNbaCuv9uQpeq4i2sRrk7EKFgd56TTTHXpKDrW4JEDfsueAfLYC9CTPAung761RWMcWE3aP/0/*),and_v(v:older(12960),after(1763072000))),\
            and_v(v:pk([c907dcb9/86'/1'/1751476594'/0/0]029d47adc090487692bc8c31729085be2ade1a80aa72962da9f1bb80d99d0cd7bf),and_v(v:older(25920),after(1766096000)))})\
            #0hqx0pru",
            "tr([9c7088e3/86'/1'/1']tpubDD2pKf3K2M2oygc9tQX4ze9o9sMmn738oHEiRTwxAWJyW7HyPYjYQKMrxznXmgWncr416q1htkCszdHg3tbGseUUQXoxFZmjdAbwU8HY9QX/1/*,\
            {and_v(v:pk([f0d79bf6/86'/1'/1751476594']tpubDDFibSiSkFTfnLc4cG5X2wwkLjatiWbxb3T6PNbaCuv9uQpeq4i2sRrk7EKFgd56TTTHXpKDrW4JEDfsueAfLYC9CTPAung761RWMcWE3aP/1/*),and_v(v:older(12960),after(1763072000))),\
            and_v(v:pk([c907dcb9/86'/1'/1751476594'/0/0]029d47adc090487692bc8c31729085be2ade1a80aa72962da9f1bb80d99d0cd7bf),and_v(v:older(25920),after(1766096000)))})\
            #r5t9us5w",
            "bcrt1p5mf2ulak53flxtgaxtlalsclxvp6wuzteut07n46hc8zv6rwc6rs6jldmr",
            "bcrt1p7rq4t6jkf0f0cm297e22drf8xjmk9228my7yeahzlhdqyc8w38vs0cqh5q"
        ],
        [
            "tr([9c7088e3/86'/1'/2']tpubDD2pKf3K2M2p2MS1LdNxnNPKY61JgpGp9VTHf1k3e8coJk4ud2BhkrxYQifa8buLnrCyUbJke4US5cVobaZLr9qU554oMdwucWZpYZj5t13/0/*,\
            {and_v(v:pk([f0d79bf6/86'/1'/1751476594']tpubDDFibSiSkFTfnLc4cG5X2wwkLjatiWbxb3T6PNbaCuv9uQpeq4i2sRrk7EKFgd56TTTHXpKDrW4JEDfsueAfLYC9CTPAung761RWMcWE3aP/0/*),and_v(v:older(12960),after(1794608000))),\
            {and_v(v:pk([c907dcb9/86'/1'/1751476594'/0/0]029d47adc090487692bc8c31729085be2ade1a80aa72962da9f1bb80d99d0cd7bf),and_v(v:older(25920),after(1797632000))),and_v(v:pk([767e581a/86'/1'/1751476594'/0/0]03f49679ef0089dda208faa970d7491cca8334bbe2ca541f527a6d7adf06a53e9e),and_v(v:older(38880),after(1800656000)))}})\
            #9lwn0wm9",
            "tr([9c7088e3/86'/1'/2']tpubDD2pKf3K2M2p2MS1LdNxnNPKY61JgpGp9VTHf1k3e8coJk4ud2BhkrxYQifa8buLnrCyUbJke4US5cVobaZLr9qU554oMdwucWZpYZj5t13/1/*,\
            {and_v(v:pk([f0d79bf6/86'/1'/1751476594']tpubDDFibSiSkFTfnLc4cG5X2wwkLjatiWbxb3T6PNbaCuv9uQpeq4i2sRrk7EKFgd56TTTHXpKDrW4JEDfsueAfLYC9CTPAung761RWMcWE3aP/1/*),and_v(v:older(12960),after(1794608000))),\
            {and_v(v:pk([c907dcb9/86'/1'/1751476594'/0/0]029d47adc090487692bc8c31729085be2ade1a80aa72962da9f1bb80d99d0cd7bf),and_v(v:older(25920),after(1797632000))),and_v(v:pk([767e581a/86'/1'/1751476594'/0/0]03f49679ef0089dda208faa970d7491cca8334bbe2ca541f527a6d7adf06a53e9e),and_v(v:older(38880),after(1800656000)))}})\
            #mh7ydv64",
            "bcrt1p696kkt5g550uv0c4dmct5w3ul5fxyp4lh9350ud5ejc4lxm4u98shxl2ct",
            "bcrt1pkzck2ns3wzr9v88ruymymrdg8vdft6uqjatxc79teg96jvnu55fskynp3x"
        ]
    ];

    pub fn get_test_heir_pubkey(th: TestHeritage) -> String {
        let val: Value = serde_json::json!(get_test_heritage(th));
        val.as_object()
            .unwrap()
            .get("heir_config")
            .unwrap()
            .as_object()
            .unwrap()
            .get("value")
            .unwrap()
            .as_str()
            .unwrap()
            .to_owned()
    }

    const BAD_OWNER_ACCOUNT_XPUB: &str = "[12345678/86'/1'/0']tpubDD2pKf3K2M2oukBVyGLVBKhqMV2MC5jQ3ABYNY17tFUgkq8Y2M65yBmeZHiz9gwrYfYkCZqipP9pL5NGwkSSsS2dijy7Nus1DLJLr6FQyWv/*";

    pub fn get_bad_account_xpub() -> AccountXPub {
        AccountXPub::try_from(BAD_OWNER_ACCOUNT_XPUB).unwrap()
    }

    pub fn get_default_test_subwallet_config(thc: TestHeritageConfig) -> SubwalletConfig {
        let mut swc = get_test_subwallet_config(thc as u32, thc);
        match thc {
            TestHeritageConfig::BackupWifeY2 => swc.set_subwallet_firstuse(1700000000),
            TestHeritageConfig::BackupWifeY1 => swc.set_subwallet_firstuse(1731536000),
            TestHeritageConfig::BackupWifeBro => swc.set_subwallet_firstuse(1763072000),
        };
        swc
    }

    pub fn get_default_test_subwallet_config_expected_external_descriptor(
        thc: TestHeritageConfig,
    ) -> &'static str {
        EXPECTED_VALUES[thc as usize][0]
    }
    pub fn get_default_test_subwallet_config_expected_change_descriptor(
        thc: TestHeritageConfig,
    ) -> &'static str {
        EXPECTED_VALUES[thc as usize][1]
    }
    pub fn get_default_test_subwallet_config_expected_address(
        thc: TestHeritageConfig,
        index: usize,
    ) -> &'static str {
        EXPECTED_VALUES[thc as usize][2 + index]
    }

    pub fn get_blocktime_for_timestamp(timestamp: u64) -> BlockTime {
        assert!(timestamp > REFERENCE_BLOCK_TIME.timestamp);
        BlockTime {
            height: REFERENCE_BLOCK_TIME.height
                + (timestamp - REFERENCE_BLOCK_TIME.timestamp) as u32 / 600,
            timestamp,
        }
    }

    #[allow(dead_code)]
    pub fn get_blocktime_for_height(height: u32) -> BlockTime {
        BlockTime {
            height,
            timestamp: REFERENCE_BLOCK_TIME.timestamp
                + (height - REFERENCE_BLOCK_TIME.height) as u64 * 600,
        }
    }

    pub fn get_absolute_inheritance_timestamp(hc: TestHeritageConfig, heir: TestHeritage) -> u64 {
        let hc = get_test_heritage_config(hc);
        let explorer = hc
            .get_heritage_explorer(get_test_heritage(heir).get_heir_config())
            .unwrap();
        explorer
            .get_spend_conditions()
            .get_spendable_timestamp()
            .unwrap_or(0)
    }
}

/// Test consts and functions that are used by the psbt-tests feature
#[cfg(any(test, feature = "psbt-tests"))]
pub mod psbttests {
    use bdk::bitcoin::psbt::PartiallySignedTransaction;
    use core::str::FromStr;

    /// In order:
    /// - Owner/Recipients
    /// - Owner/Drain
    /// - Backup/Drain - Present
    /// - Wife/Drain - Present
    /// - Backup/Drain - Future
    /// - Wife/Drain - Future
    /// - Brother/Drain - Future
    const UNSIGNED_PSBTS: [&str; 7] = [
        "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",
    ];
    const SIGNED_PSBTS: [&str; 7] = [
        "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",
    ];

    #[derive(Debug, Clone, Copy)]
    pub enum TestPsbt {
        OwnerRecipients,
        OwnerDrain,
        BackupPresent,
        WifePresent,
        BackupFuture,
        WifeFuture,
        BrotherFuture,
    }
    pub fn get_test_unsigned_psbt(tp: TestPsbt) -> PartiallySignedTransaction {
        PartiallySignedTransaction::from_str(UNSIGNED_PSBTS[tp as usize]).unwrap()
    }
    pub fn get_test_signed_psbt(tp: TestPsbt) -> PartiallySignedTransaction {
        PartiallySignedTransaction::from_str(SIGNED_PSBTS[tp as usize]).unwrap()
    }
}

/// Test consts and functions that are used by the database-tests feature
#[cfg(any(test, feature = "database-tests"))]
mod dbtests {
    use crate::{
        heritage_config::{v1::Heritage, HeritageConfig},
        subwallet_config::SubwalletConfig,
        AccountXPub,
    };

    const OWNER_ACCOUNT_XPUBS: [&str; 20] = [
        "[9c7088e3/86'/1'/0']tpubDD2pKf3K2M2oukBVyGLVBKhqMV2MC5jQ3ABYNY17tFUgkq8Y2M65yBmeZHiz9gwrYfYkCZqipP9pL5NGwkSSsS2dijy7Nus1DLJLr6FQyWv/*",
        "[9c7088e3/86'/1'/1']tpubDD2pKf3K2M2oygc9tQX4ze9o9sMmn738oHEiRTwxAWJyW7HyPYjYQKMrxznXmgWncr416q1htkCszdHg3tbGseUUQXoxFZmjdAbwU8HY9QX/*",
        "[9c7088e3/86'/1'/2']tpubDD2pKf3K2M2p2MS1LdNxnNPKY61JgpGp9VTHf1k3e8coJk4ud2BhkrxYQifa8buLnrCyUbJke4US5cVobaZLr9qU554oMdwucWZpYZj5t13/*",
        "[9c7088e3/86'/1'/3']tpubDD2pKf3K2M2p32v62yjk7gHUzr8Nsu7oz2KE7rAyPpNRfdiaGcaFpAgBZMXACByAiw85jBJCuEsiKxumh9zrS6KUNK3BTXuKSTCFzEzfYAr/*",
        "[9c7088e3/86'/1'/4']tpubDD2pKf3K2M2p77GVTKs7PJfPtqzRLKSJ9DsbZeYDmFKAJEqsDmeiBbiM63Usg48UYxyT3ZZGjE66683KaG7vDRSzvWWDejhkWG8VeHrL65d/*",
        "[9c7088e3/86'/1'/5']tpubDD2pKf3K2M2p9CrcSUDT5kZqhTw8WEG2E93wZiWgjYFdAMuBSAf1SvQY1UnHk9J4xFgcoMNziJsMyzhCxkpi5f9ivgdxGVQTnNuaLMBFnX2/*",
        "[9c7088e3/86'/1'/6']tpubDD2pKf3K2M2pBBMnCozXtNKMLmUvZVaVSYrtVcSqajc9XzQeyymLsRkCpkL8QP3cp7LKcrpb9D97n39gZ539zZ4ambwSUBLYoupwpXptv3X/*",
        "[9c7088e3/86'/1'/7']tpubDD2pKf3K2M2pDvwTsF57CaFck5btMQCXA4DMqHhWddcWZT5Fou6poCdE5iokEsZDkyJGsKhsPSuJ6QkoDuygZndvoEDFsutPKVV2vLdeYvE/*",
        "[9c7088e3/86'/1'/8']tpubDD2pKf3K2M2pHfUPiY626U2uh4fcsw5oBo7co5UUCZp1TetbjRNBax6szSxm4MzbQyAKdiRcYKV2xLMXnLfDDCJRkS3NgWT9LZYV1xwhGyQ/*",
        "[9c7088e3/86'/1'/9']tpubDD2pKf3K2M2pJWX51vGsEghdjCVeyT7Hv1e794ehZ7uJKn2zieD7u1VsbH9J5CJQYZQ7L4hkfU1HqEYbYd8fmKRG3V3t7NHfFDfFn9667tj/*",
        "[9c7088e3/86'/1'/10']tpubDD2pKf3K2M2pMbAdHCchpGb5s7Nm4vUBQHReDubziTowFAxEAKV6swJVDCDYwQZaxYiN4fk83BmHEoZbTNLRiCwCqYCdYKDykPyMzpEZN6h/*",
        "[9c7088e3/86'/1'/11']tpubDD2pKf3K2M2pNtnBBdpkyXEGjvZna3XBGxVT3Zj4u2DreNz2EJJJjqN5f5sDDdgQ1FHPWSEinG9QNVZC8uU8RgDacAoVCjQF3ZXy6aduMQj/*",
        "[9c7088e3/86'/1'/12']tpubDD2pKf3K2M2pSygWGZCvFE6ro8EmAojbGbTTVjDZzKM45KDKgHn4naLCFSJZLSQP2gL1YaLAAmYVRQh8rxwPPCEaGFdtvfPWDeV6cge2ytx/*",
        "[9c7088e3/86'/1'/13']tpubDD2pKf3K2M2pV5nuQ4Kn3awpL2UAfv28amHat8Mb9eFHnyw2iwEuTC58q73cVqoZ9FEgQ9yJiC79y44Q2aqysTWPX6ZSsvLo9gLunPwogr7/*",
        "[9c7088e3/86'/1'/14']tpubDD2pKf3K2M2pYjXBctMmYakTC4Sxc1jzsGGAVXdPz4raMj2oVUHSSDCtRVPbNHQVrMry6Updt65T6pg6igo4c1HSTN1AwnAWgoQs5gtMUCW/*",
        "[9c7088e3/86'/1'/15']tpubDD2pKf3K2M2pZK6tVcDjvHy9BG26xVGPrdd8a7QwBJWyVqCYQjtqBG9mH7iSfyb4dzhNBE4qvTEPfnZg4sqJca7ZPRuL6rP5j7AMkGkqhyt/*",
        "[9c7088e3/86'/1'/16']tpubDD2pKf3K2M2pcpczWN95dG2eUpqKKk9aQFWWxqvjmQwkVQbt9MJhrcS6Eq7oLYb6uKY8p3PEwVvCBy9pe7eKCXjYPeGZe6iXSWhVFAGFe43/*",
        "[9c7088e3/86'/1'/17']tpubDD2pKf3K2M2pg8oiXb2pcdz9QYgexBa43U2Wt1EDX2w8SoY9p8p55SZsdsABUJLbHy6Hfi19nHsRrELJ6L6ZYA9VuYb6FAryhxonDwf3YFL/*",
        "[9c7088e3/86'/1'/18']tpubDD2pKf3K2M2pidehdGHhWgQxbwK26FxGgZi7viZGJSyugbZNJgvhb5H1F6GHx817x6wpJ5bKjfP7XmXHyetu6ZVTi7fLxkAASWjohjzwSiM/*",
        "[9c7088e3/86'/1'/19']tpubDD2pKf3K2M2pm4JswF6uHWJMa4Radk1DEB5uEk5eKH145HefKLMKN71uCYFVLHU14JDaDNFERTN4yXzESP7tPpkeXTZm38girQors7bVmhh/*"
    ];

    const HEIRS_HERITAGES: [&str; 3] = [
        r#"{
            "heir_config":{"type":"HEIR_X_PUBKEY","value":"[f0d79bf6/86'/1'/1751476594']tpubDDFibSiSkFTfnLc4cG5X2wwkLjatiWbxb3T6PNbaCuv9uQpeq4i2sRrk7EKFgd56TTTHXpKDrW4JEDfsueAfLYC9CTPAung761RWMcWE3aP/*"},
            "time_lock":365
        }"#,
        r#"{
            "heir_config":{"type":"SINGLE_HEIR_PUBKEY","value":"[c907dcb9/86'/1'/1751476594'/0/0]029d47adc090487692bc8c31729085be2ade1a80aa72962da9f1bb80d99d0cd7bf"},
            "time_lock":400
        }"#,
        r#"{
            "heir_config":{"type":"SINGLE_HEIR_PUBKEY","value":"[767e581a/86'/1'/1751476594'/0/0]03f49679ef0089dda208faa970d7491cca8334bbe2ca541f527a6d7adf06a53e9e"},
            "time_lock":435
        }"#,
    ];

    #[derive(Debug, Clone, Copy)]
    pub enum TestHeritage {
        Backup = 0,
        Wife = 1,
        Brother = 2,
    }

    pub fn get_test_heritage(th: TestHeritage) -> Heritage {
        serde_json::from_str(HEIRS_HERITAGES[th as usize]).unwrap()
    }

    #[derive(Debug, Clone, Copy)]
    pub enum TestHeritageConfig {
        BackupWifeY2,
        BackupWifeY1,
        BackupWifeBro,
    }
    pub fn get_test_heritage_config(thc: TestHeritageConfig) -> HeritageConfig {
        match thc {
            TestHeritageConfig::BackupWifeY2 => HeritageConfig::builder_v1()
                .add_heritage(get_test_heritage(TestHeritage::Backup))
                .add_heritage(get_test_heritage(TestHeritage::Wife))
                .reference_time(1700000000)
                .minimum_lock_time(90)
                .build(),
            TestHeritageConfig::BackupWifeY1 => HeritageConfig::builder_v1()
                .add_heritage(get_test_heritage(TestHeritage::Backup))
                .add_heritage(get_test_heritage(TestHeritage::Wife))
                .reference_time(1731536000)
                .minimum_lock_time(90)
                .build(),
            TestHeritageConfig::BackupWifeBro => HeritageConfig::builder_v1()
                .add_heritage(get_test_heritage(TestHeritage::Backup))
                .add_heritage(get_test_heritage(TestHeritage::Wife))
                .add_heritage(get_test_heritage(TestHeritage::Brother))
                .reference_time(1763072000)
                .minimum_lock_time(90)
                .build(),
        }
    }

    pub fn get_test_account_xpub_str(index: u32) -> &'static str {
        OWNER_ACCOUNT_XPUBS[index as usize]
    }
    pub fn get_test_account_xpub(index: u32) -> AccountXPub {
        AccountXPub::try_from(get_test_account_xpub_str(index)).unwrap()
    }

    pub fn get_test_subwallet_config(ad_index: u32, thc: TestHeritageConfig) -> SubwalletConfig {
        SubwalletConfig::new(
            get_test_account_xpub(ad_index),
            get_test_heritage_config(thc),
        )
    }
}
